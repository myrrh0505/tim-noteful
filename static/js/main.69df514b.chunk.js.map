{"version":3,"sources":["Button/Button.js","NotefulContext.js","notes-helpers.js","NoteViewFolder/NoteViewFolder.js","config.js","Note/Note.js","NoteView/NoteView.js","NoteList/NoteList.js","NoteListFolder/NoteListFolder.js","Header/Header.js","ValidationError.js","Dropdown.js","NotefulError.js","AddNote/AddNote.js","NewFolder/NewFolder.js","App/App.js","index.js"],"names":["Button","props","button","className","children","otherProps","React","createElement","join","NotefulContext","createContext","notes","folders","deleteNote","addNote","newFolder","deleteFolder","findNote","noteId","find","note","id","parseInt","NoteViewFolder","this","context","match","params","folder","folderId","findFolder","role","onClick","history","goBack","name","Component","defaultProps","contextType","Note","handleClickDelete","e","preventDefault","fetch","config","method","headers","then","res","ok","json","Promise","reject","catch","error","console","modified","to","type","onDeleteNote","push","NoteView","content","handleDeleteNote","split","map","para","i","key","NoteList","notesForFolder","filter","folder_id","getNotesForFolder","Link","NoteListFolder","length","countNotesForFolder","Header","ValidationError","message","Dropdown","onChange","updateFolderId","target","value","NotefulError","state","hasError","AddNote","setState","touched","log","router","updateModified","event","body","JSON","stringify","data","moment","ToDate","trim","nameError","validateName","contentError","validateContent","folder_idError","validateFolderId","toDate","onSubmit","handleSubmit","htmlFor","updateName","updateContent","disabled","linkTo","NewFolder","style","App","goHome","updateList","all","foldersRes","notesRes","path","exact","component","contextValue","Provider","renderFolderRoutes","renderNoteRoutes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.69df514b.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Button.css';\n\nexport default function Button(props) {\n    const {button, className, children, ...otherProps} = props;\n    return React.createElement(\n        props.button,\n        {\n            className: ['button', props.className].join(' '),\n            ...otherProps\n        },\n        props.children\n    )\n}\n\nButton.propTypes = {\n    className: PropTypes.string.isRequired,\n    children: PropTypes.string.isRequired\n};","import React from 'react';\n\nconst NotefulContext = React.createContext({\n  notes: [],\n  folders: [],\n  deleteNote: () => {},\n  addNote: () => {},\n  newFolder: () => {},\n  deleteFolder: () => {},\n})\n\nexport default NotefulContext\n","export const findFolder = (folders = [], folderId) => {\n  return folders.find(folder => folder.id === parseInt(folderId))\n}\n\nexport const findNote = (notes = [], noteId) => {\n  return notes.find(note => note.id === parseInt(noteId))\n}\n\nexport const getNotesForFolder = (notes = [], folderId) => (\n  (!folderId)\n    ? notes\n    : notes.filter(note => note.folder_id === folderId)\n)\n\nexport const countNotesForFolder = (notes = [], folderId) => \n  notes.filter(note => note.folder_id === folderId).length\n","import React from 'react';\nimport Button from '../Button/Button';\nimport NotefulContext from '../NotefulContext';\nimport {findNote, findFolder} from '../notes-helpers';\nimport PropTypes from 'prop-types';\nimport './NoteViewFolder.css';\n\nexport default class NoteViewFolder extends React.Component {\n    static defaultProps = {\n        history: {\n            goBack: () => { }\n        },\n        match: {\n            params: {}\n        }\n    }\n    static contextType = NotefulContext;\n\n    render() {\n        const {notes, folders} = this.context\n        const {noteId} = this.props.match.params\n        const note = findNote(notes, noteId) || {}\n        const folder = findFolder(folders, note.folderId)\n        return (\n            <div className = 'noteViewFolder'>\n                {/* <AddFolder /> */}\n                <Button\n                    button = 'button'\n                    role = 'link'\n                    onClick = {() => this.props.history.goBack()}\n                    className = 'noteViewFolder-goBack'>\n                    Go Back\n                </Button>\n                {folder && (\n                    <h3 className = 'noteViewFolder-folderName'>\n                        {folder.name}\n                    </h3>\n                )}\n            </div>\n        )\n    }\n}\n\nNoteViewFolder.propTypes = {\n    match: PropTypes.object.isRequired,\n    history: PropTypes.object.isRequired\n}","export default {\n    API_ENDPOINT: `https://shrouded-hamlet-39949.herokuapp.com/api/`\n    // API_ENDPOINT: `http://localhost:8000/api/`\n  }","import React from 'react';\nimport {Redirect, Link} from 'react-router-dom';\n// import {format} from 'date-fns';\nimport NotefulContext from '../NotefulContext';\nimport config from '../config';\nimport PropTypes from 'prop-types';\nimport './Note.css';\n\nexport default class Note extends React.Component {\n    static contextType = NotefulContext\n    static defaultProps = {\n        onDeleteNote: () => {},\n        history: {\n            push: () => { }\n        },\n    }\n    static contextType = NotefulContext;\n\n    handleClickDelete = (e) => {\n        e.preventDefault() \n        const noteId = this.props.id\n    \n        fetch(`${config.API_ENDPOINT}notes/${noteId}`, {\n            method: 'DELETE',\n            headers: {\n                'content-type': 'application/json'\n            },\n        })\n            .then(res => {\n                if (!res.ok)\n                    return res.json().then(e => Promise.reject(e))\n                return res.json()\n            })\n            .then(() => {\n                this.context.deleteNote(noteId)\n            })\n            .catch(error => {\n                console.error('delete note', {error})\n            })\n    }\n    \n    render() {\n        const {id, name, modified} = this.props\n        if (!this.props.id) {\n            return <Redirect to = '/' />\n        }\n        \n        return (\n            <div className = 'note'>\n                <h2 className = 'noteTitle'>\n                    <Link to = {`/note/${id}`}>\n                        {name}\n                    </Link>\n                </h2>\n                <button \n                    className = 'deleteNote'\n                    type = 'button'\n                    onClick = {this.handleClickDelete}>\n                    remove\n                </button>\n                <div className = 'noteDate'>\n                    <div className = 'modifiedDate'>\n                        Modified \n                        {' '}\n                        <span className = 'Date'>\n                            {modified}\n                            {/* {format(props.modified, 'Do MMM YYYY')} */}\n                        </span>\n                    </div>\n                </div>\n                \n            </div>\n        )\n    }\n}\n\nNote.propTypes = { \n    name: PropTypes.string,\n    id: PropTypes.number,\n    modified: PropTypes.string,\n    onDeleteNote: PropTypes.func\n};\n","import React from 'react';\nimport Note from '../Note/Note';\nimport NotefulContext from '../NotefulContext';\nimport {findNote} from '../notes-helpers';\nimport PropTypes from 'prop-types';\nimport './NoteView.css'\n\nexport default class NoteView extends React.Component {\n    static defaultProps = {\n        match: {\n            params: {}\n        }\n    }\n    static contextType = NotefulContext;\n\n    render() {\n        const {notes} = this.context\n        const {noteId} = this.props.match.params\n        const note = findNote(notes, noteId) || {content: ''}\n        return (\n            <section className = 'noteView'>\n                <Note \n                    id = {note.id}\n                    name = {note.name}\n                    modified = {note.modified}\n                    onDeleteNote = {this.handleDeleteNote}\n                />\n                <div className='noteView-content'>\n                    {note.content.split(/\\n \\r|\\n/).map((para, i) =>\n                        <p key={i}>{para}</p>\n                    )}\n                </div>\n            </section>\n        )\n    }\n}\n\nNoteView.propTypes = {\n    match: PropTypes.object.isRequired\n}","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport Note from '../Note/Note';\nimport Button from '../Button/Button';\nimport NotefulContext from '../NotefulContext';\nimport {getNotesForFolder} from '../notes-helpers';\nimport PropTypes from 'prop-types';\nimport './NoteList.css';\n\nexport default class NoteList extends React.Component {\n    static defaultProps = {\n        match: {\n            params: {}\n        }\n    }\n    static contextType = NotefulContext\n\n    render() {\n        const {folderId} = this.props.match.params\n        const {notes} = this.context\n        const notesForFolder = getNotesForFolder(notes, parseInt(folderId))\n        return (\n            <section className = 'noteList'>\n                <ul className = 'noteListUl'>\n                    {notesForFolder.map((note, i) =>\n                        <li key = {i}>\n                            <Note\n                                id = {note.id}\n                                name = {note.name}\n                                modified = {note.modified}/>\n                        </li>\n                    )}\n                </ul>\n                <div className = 'noteList-buttonBox'>\n                    <Button \n                        button = {Link}\n                        to = '/add-note'\n                        type = 'button'\n                        className = 'noteList-addNote'>\n                            Add note\n                    </Button>\n                </div>\n            </section>\n        )\n    }\n}\n\nNoteList.propTypes = {\n    match: PropTypes.object.isRequired\n};","import React from 'react';\nimport {NavLink, Link} from 'react-router-dom';\nimport Button from '../Button/Button';\nimport './NoteListFolder.css';\nimport NotefulContext from '../NotefulContext';\nimport {countNotesForFolder} from '../notes-helpers';\n\nclass NoteListFolder extends React.Component {\n    \n    static contextType = NotefulContext;\n\n    render() {\n        const {folders = [], notes = []} = this.context\n        // const handleClick = e => this.handleClickDelete(e.target.id);\n        return (\n            <div className = 'noteListFolder'>\n                <ul className = 'noteListFolder-list'>\n                    {folders.map((folder, i) =>\n                        <li key = {i}>\n                            <NavLink    \n                                className = 'noteListFolder-folderLink'\n                                to = {`/folder/${folder.id}`}>\n                                    <span className = 'noteListFolder-num'>\n                                        {countNotesForFolder(notes, folder.id)}\n                                    </span>\n                                {folder.name}\n                            </NavLink>\n                            {/* <button \n                                className = 'deleteNote'\n                                type = 'button'\n                                id = {folder.id}\n                                onClick = {handleClick}>\n                                remove\n                            </button> */}\n                        </li>\n                    )}\n                </ul>\n                <div className = 'notesListFolder-buttonBox'>\n                    <Button \n                        button = {Link}\n                        to = '/add-folder'\n                        type = 'button'\n                        className = 'noteListFolder-addButton'>\n                        Add folder\n                    </Button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default NoteListFolder","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport './Header.css';\n\nexport default function Header(){\n    return (\n        <header>\n            <h1>\n                <Link to = {'/'}>Noteful</Link>\n            </h1>\n        </header>\n    )\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function ValidationError(props) {\n  if(props.message) {\n    return (\n      <div className=\"error\">{props.message}</div>\n    );\n  }\n\n  return <></>\n}\n\nValidationError.propTypes = {\n  message: PropTypes.string\n};","import React from 'react';\nimport NotefulContext from './NotefulContext';\nimport './Dropdown.css';\n\nexport default class Dropdown extends React.Component {\n    static contextType = NotefulContext;\n    \n    render() {\n        const {folders = []} = this.context;\n        return (\n            <select \n                className = \"dropdown\"\n                onChange = {e => this.props.updateFolderId(e.target.value)}>\n                {folders.map(folder => \n                    <option \n                        key = {folder.id}\n                        value = {folder.id}\n                        className = \"folderOption\">\n                        {folder.name}\n                    </option>\n                    )}\n            </select> \n        )\n    }\n}","import React from 'react';\n\nexport default class NotefulError extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n        hasError: false\n        };\n    }\n\n    static getDerivedStateFromError(error) {\n        return { hasError: true };\n    }\n\n    render() {\n        if (this.state.hasError) {      \n          return (\n            <h2>Sorry could not add this input.</h2>\n          );\n        }\n        return this.props.children;\n    }  \n}","import React from 'react';\nimport ValidationError from '../ValidationError';\nimport config from '../config';\nimport NotefulContext from '../NotefulContext';\nimport moment from 'moment';\nimport Dropdown from '../Dropdown';\nimport NotefulError from '../NotefulError';\nimport './AddNote.css';\n\nexport default class AddNote extends React.Component {\n    static contextType = NotefulContext; \n    constructor(props) {\n        super(props);\n        this.state = {\n            name: {\n              value: '',\n              touched: false\n            },\n            modified: '',\n            folder_id: {\n                value: '1',\n                touched: false\n            },\n            content: {\n                value: '',\n                touched: false\n            },\n        };\n    }\n\n    linkTo() {\n        console.log('redirected via linkTo');\n        this.props.router.push('/');\n    }\n\n    updateName(name, modified) {\n        this.updateModified(modified);\n        this.setState({name: {value: name, touched: true}});\n    }\n\n    updateModified(modified) {\n        this.setState({modified: modified});\n    }\n\n    updateContent(content, modified) {\n        this.updateModified(modified);\n        this.setState({content: {value: content, touched: true}});\n    }\n\n    updateFolderId = (folder) => {\n        this.setState({folder_id: {value: folder, touched: true}});\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        const note = {\n            name: this.state.name.value,\n            modified: this.state.modified,\n            content: this.state.content.value,\n            folder_id: this.state.folder_id.value\n        }\n        const url = config.API_ENDPOINT + 'notes';\n        \n        fetch(url, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(note)\n        })\n        .then(res => {\n            if (!res.ok) {\n                return res.json().then(error => {\n                    throw error\n                })\n            }\n            return res.json()\n        })\n        .then(data => { \n            this.setState({\n                name: {value: data.name},   \n                modified: data.modified,     \n                folder_id: {value: data.folder_id},\n                content: {value: data.content},\n            })\n            this.context.addNote(data)\n            this.props.history.push('/')\n        })\n    }\n\n    timeStamp() {\n        moment().ToDate()\n    }\n\n    validateFolderId() {\n        const folderOption = this.state.folder_id.value;\n        if (folderOption === null) {\n            return 'Picking a folder is required'\n        }\n    }\n\n    validateName() {\n        const name = this.state.name.value.trim();\n        if (name.length === 0) {\n          return 'Name is required';\n        } else if (name.length < 3) {\n          return 'Name must be at least 3 characters long';\n        }\n    }\n\n    validateContent() {\n        const content = this.state.content.value.trim();\n        if (content.length === 0) {\n            return 'Contents of the note are empty, this is required for note creation';\n        }\n    }\n    \n    render() {\n        const nameError = this.validateName();\n        const contentError = this.validateContent();\n        const folder_idError = this.validateFolderId();\n        const modified = moment().toDate();\n         return (\n            <form className = \"AddNote\"\n                onSubmit = {(e) => this.handleSubmit(e)}>\n                <NotefulError>\n                    <h2>Create a new note!</h2>\n                    <div className=\"registration__hint\">* required field</div>\n                    <label htmlFor=\"name\">Note Name *</label> \n                    <input \n                        type = \"text\" \n                        className = \"noteCreation\" \n                        id = \"makeName\"\n                        onChange = {e => this.updateName(e.target.value, modified)}/>\n                    {this.state.name.touched && (\n                        <ValidationError message = {nameError}/>\n                    )}\n                    <label className = \"select\" htmlFor = \"folderSelect\">Pick a folder *</label>\n                    <Dropdown \n                        updateFolderId = {this.updateFolderId}/>\n                    {this.state.folder_id.touched && (   \n                        <ValidationError folder_idError = {folder_idError}/>\n                    )} \n                    <label className = \"contentText\" htmlFor = \"Content\">Note Content *</label> \n                    <input \n                        type = \"text\" \n                        className = \"noteContentCreation\"\n                        name = \"Content\" \n                        id = \"makeContent\" \n                        onChange = {e => this.updateContent(e.target.value, modified)}/>\n                    {this.state.name.touched && (\n                        <ValidationError message = {contentError}/>\n                    )}\n                    <button\n                        type = \"submit\"\n                        className = \"noteCreation_button\"\n                        disabled = {\n                            this.validateName() ||\n                            this.validateContent() ||\n                            this.validateFolderId()\n                        }\n                        onSubmit = {e => this.linkTo()}>\n                        Create Note\n                    </button>\n                </NotefulError>\n            </form>\n        )\n    }\n}","import React from 'react';\nimport ValidationError from '../ValidationError';\nimport config from '../config';\nimport NotefulContext from '../NotefulContext';\nimport NotefulError from '../NotefulError';\nimport './NewFolder.css';\n\nexport default class NewFolder extends React.Component {\n    static contextType = NotefulContext; \n    constructor(props) {\n        super(props);\n        this.state = {\n            name: {\n              value: '',\n              touched: false\n            },\n            id: '',\n            \n        };\n    }\n\n    updateName(name) {\n        this.setState({name: {value: name, touched: true}});\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        const folder = {\n            id: this.state.id,\n            name: this.state.name.value\n        }\n        const url = config.API_ENDPOINT + 'folders';\n        fetch(url, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(folder)\n        })\n        .then(res => {\n            if (!res.ok) {\n                return res.json().then(error => {\n                    throw error\n                })\n            }\n            return res.json()\n        })\n        .then(data => {\n            this.setState({\n                name: {value: data.name},\n                id: data.id\n            })\n            this.context.newFolder(data)\n            this.props.history.push('/')\n        })\n    }\n\n    validateName() {\n        const name = this.state.name.value.trim();\n        if (name.length === 0) {\n          return 'Name is required';\n        } \n        else if (name.length < 3) {\n          return 'Name must be at least 3 characters long';\n        }\n    }\n    \n    render() {\n        const nameError = this.validateName();\n        return (\n            <form className = \"newFolder\"\n                onSubmit = {(e) => this.handleSubmit(e)}>\n                <NotefulError>\n                    <h2>Create a new folder!</h2>\n                    <div className=\"folderCreation__hint\">* required field</div>\n                    <label htmlFor=\"name\">Folder Name *</label> \n                    <input \n                        type = \"text\" \n                        className = \"folderCreation\"\n                        name = \"name\" \n                        id = \"name\" \n                        onChange = {e => this.updateName(e.target.value)}/>\n                    {this.state.name.touched && (\n                        <ValidationError message = {nameError}/>\n                    )}\n                    <button\n                        type = \"submit\"\n                        className = \"folderCreation_button\"\n                        style = {this.state.name.touched ? {\"cursor\": \"pointer\"} : {\"cursor\": \"not-allowed\"}}\n                        disabled = {\n                            this.validateName() \n                        }\n                        >\n                        Create Folder\n                    </button>\n                </NotefulError>\n            </form>\n        )\n    }\n}","import React from 'react';\nimport {Route} from 'react-router-dom';\nimport NoteViewFolder from '../NoteViewFolder/NoteViewFolder';\nimport NoteView from '../NoteView/NoteView';\nimport NoteList from '../NoteList/NoteList';\nimport NoteListFolder from '../NoteListFolder/NoteListFolder';\nimport Header from '../Header/Header';\nimport NotefulContext from '../NotefulContext';\nimport config from '../config';\nimport AddNote from '../AddNote/AddNote';\nimport NewFolder from '../NewFolder/NewFolder';\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    notes: [],\n    folders: [],\n    goHome: false\n  };\n  static defaultProps = {\n    history: {\n      push: () => { },\n      goBack: () => {}\n    },\n  };\n\n  componentDidMount() {\n    this.updateList()\n  }\n\n  updateList = () => {\n    Promise.all([\n      fetch(`${config.API_ENDPOINT}folders`),\n      fetch(`${config.API_ENDPOINT}notes`)\n    ])\n      .then(([foldersRes, notesRes]) => {\n        if(!notesRes.ok)\n          return notesRes.json().then(e => Promise.reject(e));\n        if(!foldersRes.ok)\n          return foldersRes.json().then(e => Promise.reject(e));\n        \n          return Promise.all([notesRes.json(), foldersRes.json()]);\n      })\n      .then(([notes, folders]) => {\n        this.setState({notes, folders});\n      })\n      .catch(error => {\n        console.error({error});\n      });       \n  }\n\n  handleDeleteNote = noteId => {\n    this.setState({\n      notes: this.state.notes.filter(note => note.id !== noteId)\n    });\n  };\n\n  addNote = note => {\n    this.setState({\n      notes: [ ...this.state.notes, note ],\n    });\n  }\n\n newFolder  = folder => {\n    this.setState({\n      folders: [ ...this.state.folders, folder],\n    });\n  }\n\n\n\n  renderFolderRoutes() {\n    return (\n      <>\n        {['/', '/folder/:folderId'].map(path => (\n          <Route\n            exact \n            key = {path}\n            path = {path}\n            component = {NoteListFolder}\n          />\n        ))}\n        <Route\n          path = '/note/:noteId'\n          component = {NoteViewFolder}\n        />\n        <Route \n          path = '/add-folder' \n          component = {NoteViewFolder} \n        />\n        <Route \n          path = '/add-note' \n          component = {NoteViewFolder} \n        />\n      </>\n    );\n  }\n\n  renderNoteRoutes() {\n        return (\n            <>\n                {['/', '/folder/:folderId'].map(path => (\n                    <Route\n                        exact\n                        key = {path}\n                        path = {path}\n                        component = {NoteList}\n                    />\n                ))}\n                <Route\n                    path=\"/note/:noteId\"\n                    component = {NoteView}\n                />\n                <Route \n                  path = '/add-folder' \n                  component = {NewFolder} \n                />\n                <Route \n                  path = '/add-note' \n                  component = {AddNote}\n                />\n            </>\n        );\n  }\n\n  render() {\n    const contextValue = {\n      folders: this.state.folders,\n      notes: this.state.notes,\n      deleteNote: this.handleDeleteNote,\n      addNote: this.addNote,\n      newFolder: this.newFolder\n      // deleteFolder: this.deleteFolder\n    };\n    return(\n      <NotefulContext.Provider value = {contextValue}>\n        <div className = 'App'>\n          <nav \n            className = 'folderNav'>\n            {this.renderFolderRoutes()}\n          </nav>\n          <Header />\n          <main \n            className = 'seeNotes'>\n            {this.renderNoteRoutes()}\n          </main>\n        </div>\n      </NotefulContext.Provider>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport './index.css';\nimport App from './App/App';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>, \n    document.getElementById('root')\n);\n"],"sourceRoot":""}